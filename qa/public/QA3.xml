<QA>
−
<users>
−
<user id="277826">
<displayname>sdaau</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>sdaau@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="236455">
<displayname>Fraser Graham</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Fraser Graham@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="69307">
<displayname>anon</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>anon@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="324528">
<displayname>ipeet</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>ipeet@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="354803">
<displayname>ShinTakezou</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>ShinTakezou@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="103167">
<displayname>Ben Voigt</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Ben Voigt@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="366377">
<displayname>Jens Gustedt</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Jens Gustedt@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="67022">
<displayname>bstpierre</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>bstpierre@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="448275">
<displayname>trevor</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>trevor@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="430719">
<displayname>Bart van Ingen Schenau</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Bart van Ingen Schenau@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="20270">
<displayname>Hasturkun</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Hasturkun@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="464709">
<displayname>Frédéric Hamidi</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Frédéric Hamidi@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="371250">
<displayname>ninjalj</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>ninjalj@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="104596">
<displayname>mpe</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>mpe@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="130641">
<displayname>John Ledbetter</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>John Ledbetter@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="239696">
<displayname>Michael Greene</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Michael Greene@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="121112">
<displayname>Fragsworth</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Fragsworth@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="95810">
<displayname>Alex Martelli</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Alex Martelli@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="182668">
<displayname>Pointy</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Pointy@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="71058">
<displayname>Craig Peterson</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Craig Peterson@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="236554">
<displayname>manifest</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>manifest@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="321013">
<displayname>Martin</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Martin@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="237062">
<displayname>ak2</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>ak2@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="146909">
<displayname>rsp2k</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>rsp2k@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="912">
<displayname>jkp</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>jkp@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="118903">
<displayname>Vinay Sajip</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Vinay Sajip@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="141186">
<displayname>jpartogi</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>jpartogi@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="126042">
<displayname>Mark Rushakoff</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Mark Rushakoff@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="176958">
<displayname>whatnick</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>whatnick@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="137317">
<displayname>kaizer.se</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>kaizer.se@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="180174">
<displayname>Kimvais</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Kimvais@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="16363">
<displayname>Mark</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Mark@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="179910">
<displayname>Jerry Coffin</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Jerry Coffin@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="299301">
<displayname>nategoose</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>nategoose@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="388520">
<displayname>Zack</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Zack@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="20862">
<displayname>Ignacio Vazquez-Abrams</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Ignacio Vazquez-Abrams@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="392358">
<displayname>joe</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>joe@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="275455">
<displayname>frankc</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>frankc@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="26428">
<displayname>Dennis Williamson</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Dennis Williamson@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="402528">
<displayname>trevor</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>trevor@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="19563">
<displayname>Charles Bailey</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Charles Bailey@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="406936">
<displayname>zaga</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>zaga@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="105043">
<displayname>second</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>second@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="389146">
<displayname>Karl Bielefeldt</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Karl Bielefeldt@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="86432">
<displayname>masonk</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>masonk@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="324731">
<displayname>lkraider</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>lkraider@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="209744">
<displayname>PP</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>PP@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="224671">
<displayname>KennyTM</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>KennyTM@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="151292">
<displayname>James McNellis</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>James McNellis@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="338803">
<displayname>sje397</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>sje397@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="22985">
<displayname>BatchyX</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>BatchyX@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="202555">
<displayname>Amnon</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>Amnon@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
−
<user id="119280">
<displayname>DVK</displayname>
<age>-1</age>
<ismoderator>false</ismoderator>
<email>DVK@gmail.com</email>
<password>secret</password>
<aboutme/>
<location/>
<website/>
</user>
</users>
−
<questions>
−
<question id="4119991">
<ownerid>277826</ownerid>
<creationdate>1289168092</creationdate>
<lastactivity>1289176685</lastactivity>
−
<body>
<![CDATA[<p>Hi all, </p><p>Lets say I have a script, "<code>myscript.sh</code>", with contents being simply <code>echo $PWD</code>. I'd like to bind somehow this script to a key combo in <code>bash</code> (<code>gnome-terminal</code>) - so that when I press this key combination, the output of "<code>myscript.sh</code>" is inserted ("pasted") at the cursor position in the terminal. </p><p>Apparently, <code>bash</code> history and line manipulation is handled by <a href="http://en.wikipedia.org/wiki/Readline" rel="nofollow">readline</a> - and the references I got for <code>bash</code> keyboard shortcuts, do reference <code>readline</code>: </p><ul><li><a href="http://ss64.com/bash/syntax-keyboard.html" rel="nofollow">bash keyboard shortcuts</a></li><li><a href="http://www.faqs.org/docs/bashman/bashref_93.html" rel="nofollow">Bash Reference Manual: Bindable Readline Commands</a></li></ul><p>I've also seen in <a href="http://www.faqs.org/docs/bashman/bashref_90.html" rel="nofollow">Bash Reference Manual: Readline Init File Syntax</a> that the key bindings for <code>bash</code> can be listed by using <code>bind -p</code> (<em>see <code>help bind</code> [not 'man bind'] for more</em>). So maybe this question would better be titled as "_binding macros to custom keyboard shortcuts in <code>readline</code>" :) But in any case, is what I want possible to do? </p><p>I guess an alternative would be to have the script be something like "<code>pwd | xsel -b</code>", and then I call it on terminal - and I can paste afterwards; but I'd still like a single keyboard shortcut instead, say like Ctrl-Alt-H (which seems to be not used for anything), which will immediately insert/paste script output when pressed. </p><p>Thanks in advance,<br>Cheers!</p><p>&nbsp;<br>EDIT: Just to clarify - here is my use case where I'd like this facility. I'm usually <code>cd</code>'d in a project folder, usually named something like <code>myproject-folder-0012a</code>, which is under revision control by <code>svn</code>. And there is a bunch of these folders. So quite often, I do commits where the first word of the message is the directory name, as in:</p><pre><code>svn ci -m "myproject-folder-0012a: here a commit message"</code></pre><p>But that is what I don't like - first I type 11 characters, which go rather fast: </p><pre><code>svn ci -m "</code></pre><p>And then, I cannot use autocompletion to get the name (i'm inside the folder) - which means I either have to fully type it (<em>no way :)</em>), or I copy paste it from the prompt (which requires selection - press mouse, drag, release mouse; then Ctrl+Shift+C, and then Ctrl+Shift+V, plus any left/right keys if I miss allignment - plus deletions and such if I make the copy wrong). </p><p>Meaning - so much work, just to get the bloody folder name for a bloody commit message :( I'd MUCH rather press something like (say) Ctrl-Alt-H, and have the folder name automatically inserted at cursor position, and be done with it :) </p><p>My suggestion for <code>xsel</code> is only because I could put it into a "global" script - say symlink it as <code>/usr/bin/myscript</code> (<em>and obviously, the contents of the script are <code>echo $(basename $PWD)</code> rather than just <code>pwd</code> for my needs</em>), and then I could do: </p><pre><code>$ myscript       # this puts directory name in clipboard$ svn ci -m "[CTRL+SHIFT+V TO PASTE HERE]myproject-folder-0012a[NOW TYPE]: here a commit message"</code></pre><p>... which sort of makes the workload less, but still - then I have to remember what the script name is, and call it, <strong>before</strong> I type the <code>svn</code> command (and I don't always remember that)... And still - I have to call a command, and then press a key combo; why shouldn't I just press a key combo once, and be done with it ??! :) </p><p>Well, hope this clarifies my problem a bit better .... </p><p>&nbsp;<br>EDIT2: However, another reason why a <code>bash</code> keyboard shortcut would be useful, is that then I could also "paste/insert current directory name" not only in shell commands - but also in terminal programs, say like <code>nano</code> (<em>where it would, arguably, be more difficult to use <code>bash</code> script or function expansion directly</em>).</p>]]>
</body>
−
<title>
Bash: call script with customized keyboard shortcuts?
</title>
<lastedit>1289176685</lastedit>
<acceptedanswer>-1</acceptedanswer>
−
<tags>
<tag id="0">linux</tag>
<tag id="1">bash</tag>
<tag id="2">keyboard-shortcuts</tag>
<tag id="3">readline</tag>
<tag id="4">customize</tag>
</tags>
</question>
−
<question id="4118207">
<ownerid>277826</ownerid>
<creationdate>1289141038</creationdate>
<lastactivity>1289141538</lastactivity>
−
<body>
<![CDATA[<p>OK, this is my problem: </p><p>I use a virtual machine with a debug kernel, so I can connect to a local instance of <code>gdb</code>, and can debug kernel modules. The modules are compiled with debug info on, and this specifies folders where the source of the modules is kept (<a href="http://stackoverflow.com/questions/1579443/instruct-gdb-6-5-to-use-source-embedded-in-object-file">Instruct GDB 6.5 to use source embedded in object file - Stack Overflow</a>). I have the source directories in the same path(s) in both VM and local machine. </p><p>The problem is this - I need to do quite a bit of steps in order to get the module to segfault - and the remote gdb to go into the stack. Then I do a backtrace, and I can see the source files referenced, i.e. </p><pre><code>#0  0xc0132a13 in ?? ()#1  0xc056e551 in ?? ()#2  0xc056e506 in ?? ()#3  0xd8be53f3 in mymodule_func1 (var1=0xd79f9b44, var2=0x0, var3=825269148)    at /media/src/mymodule.h:954#4  0xd8be53d0 in mymodule_func2 (data=3617561412)    at /media/src/mymodule.h:936#5  0xc014fe87 in ?? ()#6  0xc0151478 in ?? ()</code></pre><p>Then I try to do say, <code>list /media/src/mymodule.h:954</code> - and I realize that I have changed stuff on the local version of <code>mymodule.h</code> file!! </p><p>So I undo the changes - but unfortunately, GDB does not see these changes! And, of course, I don't want to restart GDB - because that means I have to restart the VM, and go through the entire procedure in order to get the kernel module to segfault again :( !!</p><p>Then I try to do something like this:</p><pre><code>(gdb) show symbol-reloadingDynamic symbol table reloading multiple times in one run is off.(gdb) set symbol-reloading on(gdb) add-symbol-file ~/mymodule.o 0xd8be4000add symbol table from file "/media/src/mymodule.o" at    .text_addr = 0xd8be4000(y or n) yReading symbols from /media/src/mymodule.o...done.</code></pre><p>... in hope that it will somehow "reload" the source files - but unfortunately, <code>list /media/src/mymodule.h:954</code> shows that it doesn't, nothing is changed - even though <code>gdb</code> <strong>does</strong> recognize that something has changed, as in <code>warning: Source file is more recent than executable.</code>... (<sup><sub>so, for the time being, I have to restart entire VM and <code>gdb</code> as well :( :(  </sub></sup>)</p><p>So my <strong>question</strong> is - is there a command in <code>gdb</code>, that I can use to (re)load / "refresh" source files? (<em>as far as I can see, <code>gdb</code> works only with source <strong>directories</strong>, <a href="http://davis.lbl.gov/Manuals/GDB/gdb_8.html" rel="nofollow">Debugging with GDB: Source</a> - and there is no specific command to "refresh"</em>)</p><p>Thanks in advance,<br>Cheers!</p>]]>
</body>
<title>GDB - 'reload' source files</title>
<lastedit>1289141538</lastedit>
<acceptedanswer>-1</acceptedanswer>
−
<tags>
<tag id="0">gdb</tag>
<tag id="1">linux-kernel</tag>
<tag id="2">source</tag>
<tag id="3">reload</tag>
</tags>
</question>
−
<question id="4036743">
<ownerid>277826</ownerid>
<creationdate>1288206519</creationdate>
<lastactivity>1288207390</lastactivity>
−
<body>
<![CDATA[<p>Hi all, </p><p>Trying to write a Lua script for Scite (something like <a href="http://lua-users.org/wiki/SciteCommentBox" rel="nofollow">lua-users wiki: Scite Comment Box</a>), and when I write the following piece of code:</p><pre><code>fchars = string.sub(line, 1, 3)if fchars == "//" or fchars == "##"   print "got it"end </code></pre><p>... the compilation fails with "<code>attempt to call a string value</code>". </p><p>I have tried different variants, such as:</p><pre><code>assert(ktest = (("//" == fchars) or ("##" == fchars)))</code></pre><p>... and it seems to me that compilation fails when I try to make a 'compound' boolean expression using the <a href="http://www.lua.org/manual/5.0/manual.html#2.5.3" rel="nofollow">logical operator</a> "<code>or</code>". </p><p>&nbsp;</p><p>So, how would I do the above check in Lua? Maybe the C-like syntax as above is not supported at all - and I should use something like <a href="http://www.lua.org/manual/5.1/manual.html#pdf-string.match" rel="nofollow">match</a> instead? </p><p>&nbsp;</p><p>Thanks in advance for any answers,<br>Cheers!</p>]]>
</body>
−
<title>
Scite Lua: string comparison raises "attempt to call a string value"?
</title>
<lastedit>-1</lastedit>
<acceptedanswer>4036877</acceptedanswer>
−
<tags>
<tag id="0">lua</tag>
</tags>
</question>
−
<question id="4025320">
<ownerid>277826</ownerid>
<creationdate>1288107521</creationdate>
<lastactivity>1288202745</lastactivity>
−
<body>
<![CDATA[<p>Hi all, </p><p>I've been working with a userland program <code>writeread.c</code> (referred <a href="http://stackoverflow.com/questions/3701955/serial-port-loopback-duplex-test-in-bash-or-c-process-substitution">here</a>), utilizing the <code>ftdi_sio</code> Linux driver.</p><p>I had worked with the default <code>ftdi_sio</code> that comes with Ubuntu Lucid that I use - and then, as a sanity check, decided to rebuild <code>ftdi_sio</code> from source. I did not want to download the entire kernel source, so I opted for so called "building out-of-tree modules":</p><ul><li><a href="http://www.cyberciti.biz/tips/build-linux-kernel-module-against-installed-kernel-source-tree.html" rel="nofollow">Howto: Build Linux Kernel Module Against Installed Kernel w/o Full Kernel Source Tree</a></li><li><a href="http://kernel-handbook.alioth.debian.org/ch-common-tasks.html#s-common-out-of-tree" rel="nofollow">Debian Linux Kernel Handbook - Common kernel-related tasks: Building out-of-tree kernel modules</a></li><li><a href="http://fedoraproject.org/wiki/Docs/CustomKernel#Building_Only_Kernel_Modules_.28Out_Of_Tree_Modules.29" rel="nofollow">Building a custom kernel - FedoraProject: Building Only Kernel Modules (Out Of Tree Modules)</a></li></ul><p>... which means you can only have installed <code>linux-headers-*</code> packages (instead of having entire <code>linux-source-*</code> installed) - and the respective kernel module source - in order to build a kernel module. </p><p>So, I basically got the following files in a folder:</p><ul><li><a href="http://kernel.ubuntu.com/git?p=ubuntu/ubuntu-lucid.git;a=blob_plain;f=drivers/usb/serial/ftdi_sio.c" rel="nofollow">ftdi_sio.c</a></li><li><a href="http://kernel.ubuntu.com/git?p=ubuntu/ubuntu-lucid.git;a=blob_plain;f=drivers/usb/serial/ftdi_sio.h" rel="nofollow">ftdi_sio.h</a></li><li><a href="http://kernel.ubuntu.com/git?p=ubuntu/ubuntu-lucid.git;a=blob_plain;f=drivers/usb/serial/ftdi_sio_ids.h" rel="nofollow">ftdi_sio_ids.h</a></li><li>Makefile (included below) </li></ul><p>and ran <code>make</code> - and a <code>ftdi_sio.ko</code> kernel objects compiles, which also can be <code>insmod</code>-ed without a problem. </p><p>&nbsp;</p><p>The problem is now here - as long as I work with low speeds (115200 bps), there is <em>no observable difference</em> between: loading the 'vanilla' driver (<em>using <code>sudo modprobe ftdi_sio</code></em>); and loading the newly built driver (<em>using <code>sudo modprobe usbserial; sudo insmod /path/to/ftdi_sio.ko</code></em>) - in respect to the performance of the userland program (<code>writeread.c</code>).</p><p>However, if I try the same at 2000000 bps, then the 'vanilla' driver works fine -  while the build driver causes a <strong>segfault</strong> of the userland program (<code>writeread.c</code>). In particular, this segfault happened at <code>free()</code>-ing memory resources - because the driver would end up reading <em>more</em> bytes from the loopback connection, than it itself would write! However, that in itself is not that relevant for this discussion, because I finally found a way to get the built <code>ftdi_sio</code> to work (<em>Edit: just noticed that a similar procedure is also given in <a href="http://stackoverflow.com/questions/2237871/external-linux-kernel-module-dependencies/2238581#2238581">External Linux kernel module dependencies R#2238581 - Stack Overflow</a></em>): </p><pre><code>$ sudo modprobe -r ftdi_sio # remove 'vanilla' driver from memory ...# build the driver$ cd /path/to/ftdi_sio_2.6.32/$ make clean &amp;&amp; make # check vanilla version$ ls -la /lib/modules/2.6.32-25-generic/kernel/drivers/usb/serial/ftdi_sio.ko-rw-r--r-- 1 root root 102396 2010-10-17 01:47 /lib/modules/2.6.32-25-generic/kernel/drivers/usb/serial/ftdi_sio.ko# (re)move the 'vanilla' kernel object$ sudo mv /lib/modules/2.6.32-25-generic/kernel/drivers/usb/serial/ftdi_sio.ko ~/Desktop/ftdi_sio_orig.ko  # symlink our built version, as if it is the 'vanilla' one$ sudo ln -s /path/to/ftdi_sio_2.6.32/ftdi_sio.ko /lib/modules/2.6.32-25-generic/kernel/drivers/usb/serial/# check $ ls -la /lib/modules/2.6.32-25-generic/kernel/drivers/usb/serial/ftdi_sio.kolrwxrwxrwx 1 root root 57 2010-10-26 12:49 /lib/modules/2.6.32-25-generic/kernel/drivers/usb/serial/ftdi_sio.ko -&gt; /path/to/ftdi_sio_2.6.32/ftdi_sio.ko# call depmod$ sudo depmod# !! plug in USB at this point, built driver autoloads;# however, running `writeread.c` will segfault!# !! REBOOT at this point# after reboot:# !! plug in USB at this point, built driver autoloads;# and `writeread.c` runs without segfault</code></pre><p>So, my <strong>question</strong> is: can anyone clarify to me, why - even after running <code>depmod</code> - do I <em>still</em> have to reboot, to have the built driver behave properly? In other words: is there any other command I could call (<em>maybe after <code>depmod</code></em>), so that the driver works properly when it's loaded, <em>without</em> rebooting? </p><p>The reason I'm asking, is that I suspect that upon each recompilation of the kernel module, the symbol table will change - so to ensure that it works properly, I'd have to run <code>depmod</code> and reboot after each time the driver is built - which I think would be kind of tedious :) So, it would be nice to be able to rebuild the kernel module, and use it in the same session - without having to reboot. </p><p>&nbsp;</p><p>Well, thanks in advance for any answers, </p><p>Cheers!!</p><p>&nbsp;</p><p>&nbsp;</p><p>Makefile:</p><pre><code>CONFIG_MODULE_FORCE_UNLOAD=y# flags passed to gcc for compilation - -v:verbose, -H:show include files# KBUILD_CFLAGS += -v# for debugging make itself, use --debug=i in make command for targets# debug build:EXTRA_CFLAGS=-g -O0KVERSION = $(shell uname -r)obj-m += ftdi_sio.oall:    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modulesclean:    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean</code></pre>]]>
</body>
−
<title>
Building out-of-tree kernel modules, depmod - and, why reboot? 
</title>
<lastedit>1288202745</lastedit>
<acceptedanswer>-1</acceptedanswer>
−
<tags>
<tag id="0">linux-kernel</tag>
</tags>
</question>
−
<question id="3999114">
<ownerid>277826</ownerid>
<creationdate>1287766461</creationdate>
<lastactivity>1287781828</lastactivity>
−
<body>
<![CDATA[<p>Hi all, </p><p>Apparently this is almost a duplicate of "<a href="http://stackoverflow.com/questions/1057638/bad-pipe-filedescriptor-when-reading-from-stdin-in-python">Bad pipe filedescriptor when reading from stdin in python - Stack Overflow</a>"; however, I believe this case is slightly more complicated (<em>and it is not Windows specific, as the conclusion of that thread was</em>). </p><p>I'm currently trying to experiment with a simple script in Python: I'd like to supply input to the script - either through command line arguments; or by 'pipe'-ing a string to this script - and have the script show this input string using a <code>curses</code> terminal interface. </p><p>The full script, here called <code>testcurses.py</code>, is given below. The problem is that whenever I try the actual piping, that seems to mess up stdin, and the <code>curses</code> window never shows. Here is a terminal output: </p><pre><code>## CASE 1: THROUGH COMMAND LINE ARGUMENT (arg being stdin):##$ ./testcurses.py -['-'] 1stdout/stdin (obj): &lt;open file '&lt;stdout&gt;', mode 'w' at 0xb77dc078&gt; &lt;open file '&lt;stdin&gt;', mode 'r' at 0xb77dc020&gt;stdout/stdin (fn): 1 0env(TERM): xterm xtermstdin_termios_attr [27906, 5, 1215, 35387, 15, 15, ['\x03', ... '\x00']]stdout_termios_attr [27906, 5, 1215, 35387, 15, 15, ['\x03', ... '\x00']]opening -obj &lt;open file '&lt;stdin&gt;', mode 'r' at 0xb77dc020&gt;TYPING blabla HEREwr TYPING blabla HEREat endbefore curses TYPING blabla HERE## AT THIS POINT:# in this case, curses window is shown, with the text 'TYPING blabla HERE'# ################## CASE 2: THROUGH PIPE#### NOTE I get the same output, even if I try syntax as in SO1057638, like:## python -c "print 'TYPING blabla HERE'" | python testcurses.py -##$ echo "TYPING blabla HERE" | ./testcurses.py -['-'] 1stdout/stdin (obj): &lt;open file '&lt;stdout&gt;', mode 'w' at 0xb774a078&gt; &lt;open file '&lt;stdin&gt;', mode 'r' at 0xb774a020&gt;stdout/stdin (fn): 1 0env(TERM): xterm xtermstdin_termios_attr &lt;class 'termios.error'&gt;::(22, 'Invalid argument')stdout_termios_attr [27906, 5, 1215, 35387, 15, 15, ['\x03', '\x1c', '\x7f', '\x15', '\x04', '\x00', '\x01', '\xff', '\x11', '\x13', '\x1a', '\xff', '\x12', '\x0f', '\x17', '\x16', '\xff', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00']]opening -obj &lt;open file '&lt;stdin&gt;', mode 'r' at 0xb774a020&gt;wr TYPING blabla HEREat endbefore curses TYPING blabla HERE## AT THIS POINT:# script simply exits, nothing is shown # ################</code></pre><p>As far as I can see, the issue is: - whenever we pipe strings into the Python script, the Python script loses the reference to the <em>terminal</em> as <code>stdin</code>, and notices that the replaced <code>stdin</code> is not a <code>termios</code> structure anymore - and since <code>stdin</code> is no longer a terminal, <code>curses.initscr()</code> exits immediately without rendering anything. </p><p>So, my <strong>question</strong> is - in brief: can I somehow achieve, that the syntax <code>echo "blabla" | ./testcurses.py -</code> ends up showing the piped string in <code>curses</code>? More specifically: is it possible to retrieve a reference to the calling terminal's <code>stdin</code> from a Python script, even if this script is being "piped" to? </p><p>Thanks in advance for any pointers, </p><p>Cheers! </p><p>&nbsp;</p><p>&nbsp;</p><p>PS: the <code>testcurses.py</code> script:</p><pre><code>#!/usr/bin/env python # http://www.tuxradar.com/content/code-project-build-ncurses-ui-python# http://diveintopython.org/scripts_and_streams/stdin_stdout_stderr.html# http://bytes.com/topic/python/answers/42283-curses-disable-readline-replace-stdin## NOTE: press 'q' to exit curses - Ctrl-C will screw up yer terminal# ./testcurses.py "blabla"                  # works fine (curseswin shows)# ./testcurses.py -                     # works fine, (type, enter, curseswins shows):# echo "blabla" | ./testcurses.py "sdsd"        # fails to raise curses window # # NOTE: when without pipe: termios.tcgetattr(sys.__stdin__.fileno()): [27906, 5, 1215, 35387, 15, 15, ['\x03', # NOTE: when with pipe |   : termios.tcgetattr(sys.__stdin__.fileno()): termios.error: (22, 'Invalid argument') import cursesimport sysimport osimport atexitimport termiosdef openAnything(source):                """URI, filename, or string --&gt; stream    http://diveintopython.org/xml_processing/index.html#kgp.divein    This function lets you define parsers that take any input source    (URL, pathname to local or network file, or actual data as a string)    and deal with it in a uniform manner.  Returned object is guaranteed    to have all the basic stdio read methods (read, readline, readlines).    Just .close() the object when you're done with it.    """    if hasattr(source, "read"):        return source    if source == '-':        import sys        return sys.stdin    # try to open with urllib (if source is http, ftp, or file URL)    import urllib                             try:                                          return urllib.urlopen(source)         except (IOError, OSError):                    pass                                  # try to open with native open function (if source is pathname)    try:                                          return open(source)                   except (IOError, OSError):                    pass                                  # treat source as string    import StringIO                           return StringIO.StringIO(str(source)) def main(argv):    print argv, len(argv)    print "stdout/stdin (obj):", sys.__stdout__, sys.__stdin__     print "stdout/stdin (fn):", sys.__stdout__.fileno(), sys.__stdin__.fileno()    print "env(TERM):", os.environ.get('TERM'), os.environ.get("TERM", "unknown")    stdin_term_attr = 0    stdout_term_attr = 0    try:        stdin_term_attr = termios.tcgetattr(sys.__stdin__.fileno())    except:        stdin_term_attr = "%s::%s" % (sys.exc_info()[0], sys.exc_info()[1])     try:        stdout_term_attr = termios.tcgetattr(sys.__stdout__.fileno())    except:        stdout_term_attr = `sys.exc_info()[0]` + "::" + `sys.exc_info()[1]`     print "stdin_termios_attr", stdin_term_attr    print "stdout_termios_attr", stdout_term_attr    fname = ""    if len(argv):        fname = argv[0]    writetxt = "Python curses in action!"    if fname != "":        print "opening", fname        fobj = openAnything(fname)        print "obj", fobj        writetxt = fobj.readline(100) # max 100 chars read        print "wr", writetxt        fobj.close()        print "at end"    sys.stderr.write("before ")    print "curses", writetxt    try:        myscreen = curses.initscr()        #~ atexit.register(curses.endwin)    except:        print "Unexpected error:", sys.exc_info()[0]    sys.stderr.write("after initscr") # this won't show, even if curseswin runs fine    myscreen.border(0)    myscreen.addstr(12, 25, writetxt)    myscreen.refresh()    myscreen.getch()    #~ curses.endwin()    atexit.register(curses.endwin)    sys.stderr.write("after end") # this won't show, even if curseswin runs fine# run the main function - with arguments passed to script:if __name__ == "__main__":    main(sys.argv[1:])    sys.stderr.write("after main1") # these won't show either, sys.stderr.write("after main2")     #  (.. even if curseswin runs fine ..)</code></pre>]]>
</body>
−
<title>
Linux: Pipe into Python (ncurses) script, stdin and termios
</title>
<lastedit>-1</lastedit>
<acceptedanswer>3999695</acceptedanswer>
−
<tags>
<tag id="0">python</tag>
<tag id="1">linux</tag>
<tag id="2">pipe</tag>
<tag id="3">ncurses</tag>
<tag id="4">termios</tag>
</tags>
</question>
−
<question id="3940973">
<ownerid>277826</ownerid>
<creationdate>1287134690</creationdate>
<lastactivity>1287139603</lastactivity>
−
<body>
<![CDATA[<p>Hi all, </p><p>I'm using the following database:</p><pre><code>CREATE TABLE datas (d_id INTEGER PRIMARY KEY, name_id numeric, countdata numeric);INSERT INTO datas VALUES(1,1,20);  //(NULL,1,20);INSERT INTO datas VALUES(2,1,47);  //(NULL,1,47);INSERT INTO datas VALUES(3,2,36);  //(NULL,2,36);INSERT INTO datas VALUES(4,2,58);  //(NULL,2,58);INSERT INTO datas VALUES(5,2,87);  //(NULL,2,87);CREATE TABLE names (n_id INTEGER PRIMARY KEY, name text);INSERT INTO names VALUES(1,'nameA'); //(NULL,'nameA');INSERT INTO names VALUES(2,'nameB'); //(NULL,'nameB');</code></pre><p>What I would like to do, is to select all values (rows) of <code>names</code> - to which all columns of <code>datas</code> will be appended, for the row where <code>datas</code>.<code>countdata</code> is maximum for <code>n_id</code> (and of course, where <code>name_id = n_id</code>). </p><p>I can somewhat get there with the following query: </p><pre><code>sqlite&gt; .header ONsqlite&gt; SELECT * FROM names AS n1     LEFT OUTER JOIN (        SELECT d_id, name_id, countdata FROM datas AS d1         WHERE d1.countdata IN (            SELECT MAX(countdata) FROM datas             WHERE name_id=1             )         ) AS p1 ON n_id=name_id;n1.n_id|n1.name|p1.d_id|p1.name_id|p1.countdata1|nameA|2|1|472|nameB|||</code></pre><p>... however - obviously - it only works for a single row (the one explicitly set by <code>name_id=1</code>).</p><p>The problem is, the SQL query fails whenever I try to somehow reference the "current" <code>n_id</code>:</p><pre><code>sqlite&gt; SELECT * FROM names AS n1     LEFT OUTER JOIN (        SELECT d_id, name_id, countdata FROM datas AS d1         WHERE d1.countdata IN (            SELECT MAX(countdata) FROM datas             WHERE name_id=n1.n_id             )         ) AS p1 ON n_id=name_id;SQL error: no such column: n1.n_id</code></pre><p>Is there any way of achieving what I want in Sqlite2??</p><p>Thanks in advance, </p><p>Cheers!</p>]]>
</body>
−
<title>
sqlite2: Joining max values per column from another table (subquery reference)?
</title>
<lastedit>1287135332</lastedit>
<acceptedanswer>3941502</acceptedanswer>
−
<tags>
<tag id="0">join</tag>
<tag id="1">subquery</tag>
<tag id="2">max</tag>
<tag id="3">sqlite2</tag>
</tags>
</question>
</questions>

<answers>
−
<answer id="4120453">
<ownerid>277826</ownerid>
<questionid>4119991</questionid>
<creationdate>1289175652</creationdate>
<lastactivity>1289175652</lastactivity>
−
<body>
<![CDATA[<p>Hi all, </p><p>Ok, not really an answer, but I'd just like to summarize the comments I got so far, which are useful for my problem. However, the question as it stands - in respect to bash keyboard shortcuts running arbitrary scripts - is still not answered (<em>I'd still prefer doing all this with a single key combo :)</em>)</p><p>&nbsp;<br>First, I can use a 'global' script like: </p><pre><code>$ sudo bash -c 'cat &gt; /usr/bin/bpwd &lt;&lt;EOF#!/bin/bashbasepwd=\$(basename \$(pwd))echo -n \$basepwd                 # suppress line ending# exec 1&gt;/dev/null               # debug: redir stdout to nullecho -n \$basepwd | xsel -i -b    # suppress LF, and make xsel read from stdin # exec 1&gt;/dev/tty                # debug: restore stdoutEOFchmod +x /usr/bin/bpwd'</code></pre><p>Or, I can add <code>bash</code> functions to my <code>.bashrc</code> (<em>note: make sure you reload <code>bash</code> after you add these lines to <code>.bashrc</code> - for example, simply by typing <code>bash</code> in your current terminal</em>):</p><pre><code>$ echo 'bpwd2() { basepwd=${PWD##*/} ; echo -n $basepwd | xsel -i -b ; echo -n $basepwd ; }svnci-test() { echo -n "$(bpwd2): $*" ; }svnci-m() { svn ci -m "$(bpwd2): $*" ; }' &gt;&gt; ~/.bashrc</code></pre><p>&nbsp;<br>Basically, I misunderstood Reese Moore's suggestion originally - you can indeed use backticks - consider this command session (<em>after the above commands have been ran</em>):</p><pre><code>$ bpwdDesktop\$ bpwd2Desktop\$ echo `bpwd`Desktop$ echo "`bpwd2` 2"Desktop 2</code></pre><p>This is what I needed to understand Moore's "<em>the output from the backticked commands will be used as input on the executed command</em>" (however, one also needs to take care to clean the line endings from the output); or, in my case, I can call</p><pre><code>svn ci -m "`bpwd`: my message here"# svn ci -m "${PWD##*/}: my message here" # alternatively</code></pre><p>... or, I could follow camh's suggestion, and use <code>svnci-m</code> as a function (<em>in my case, I almost never use additional arguments to <code>svn ci</code>, and so my version is slightly different</em>). And to test whether arguments are passed correctly, I can use the <code>svnci-test</code> function:</p><pre><code>$ svnci-test "my message"Desktop: my message\</code></pre><p>&nbsp;<br>Thanks for the comments so far,<br>Cheers!</p>]]>
</body>
−
<title>
Bash: call script with customized keyboard shortcuts?
</title>
<lastedit>-1</lastedit>
<accepted>false</accepted>
</answer>
</answers>



</QA>